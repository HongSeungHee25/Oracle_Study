SELECT * FROM BOOKMEMBER b ;
SELECT * FROM BOOKS b ;
SELECT * FROM BOOKRENT b ;

-- 1. 회원별로 대출한 책의 수를 조회
SELECT b.NAME , COUNT(br.RENT_NO) 
FROM BOOKMEMBER b JOIN BOOKRENT br
ON b.MEM_IDX = br.MEM_IDX 
GROUP BY b.NAME ;

-- 2. 대출 중인 도서 목록을 조회

-- 3. 회원별로 대출한 도서 중 연체된 도서의 수와 총 연체일수를 조회


-- 4. 대출된 도서와 도서 회원의 정보를 UNION ALL로 결합하여 조회


-- 5. 도서 대출 횟수가 가장 많은 회원을 조회


-- 6. 대출일자(trunc)별로 대출 건수를 조회


-- 7. 두 테이블을 조인하여 회원 이름과 대여 횟수를 조회


-- 8. 테이블을 조인하고 조건을 추가하여 대여 횟수가 2회 이상인 회원만 조회


-- 9. UNION ALL을 사용하여 두 테이블의 데이터를 합치는 예시(bookmember,bookrent)


-- 9. 날짜 관련 함수인 TRUNC를 사용하여 대여일자의 월별 횟수를 구하는 예시


-- 10. "최행운" 회원이 대여한 책의 수를 구하시오.


-- 10번문제 서브쿼리
SELECT b.NAME , br.rent_count
FROM BOOKMEMBER b JOIN (
	SELECT br.MEM_IDX, COUNT(br.RENT_NO) AS rent_count
	FROM BOOKRENT br 
	GROUP BY br.MEM_IDX
)br
ON b.MEM_IDX = br.MEM_IDX
WHERE b.NAME = '최행운';

-- 11. "2018-07-10" 이전에 출판된 책들의 목록을 조회하시오.


-- 12. "푸른사자 와니니" 책의 대여 횟수를 구하시오.


-- 13. 반납일(exp_date)이 지나서 아직 반납되지 않은 책들의 목록을 조회하시오. (14일 이후) 
-- 이건 실행 X
SELECT b.title, bm.name, br.rent_date, br.exp_date
FROM books b
JOIN bookrent br ON b.bcode = br.bcode
JOIN bookmember bm ON br.mem_idx = bm.mem_idx
WHERE br.exp_date < TRUNC(SYSDATE) - 14
AND br.return_date IS NULL;

-- 14. 각 회원별로 대여한 책의 수를 구하시오.


-- 15. "나길동" 회원이 대여한 책 중에 연체된 책의 수와 총 연체 일수를 구하시오.(join)


-- 15번문제 서브쿼리
-- "나길동" 회원의 대여 지연일과 대여 건수 조회 
SELECT b.NAME, (
	-- BOOKRENT 테이블에서 해당 회원과 관련된 대여 정보를 가져옵니다.(연체일수)
    SELECT br.DELAY_DAYS
    FROM BOOKRENT br
    WHERE br.MEM_IDX = b.MEM_IDX
) AS DELAY_DAYS,
(
	-- BOOKRENT 테이블에서 해당 회원의 대여 건수를 카운트합니다.
    SELECT COUNT(br.RENT_NO)
    FROM BOOKRENT br
    WHERE br.MEM_IDX = b.MEM_IDX
) AS rent_count
FROM BOOKMEMBER b
WHERE b.NAME = '나길동';

-- 16. "코스모스" 책을 대여한 회원들의 이메일 주소를 조회하시오.


-- 17. 연체 일수가 가장 많은 책을 대여한 회원의 이름과 연체 일수를 조회하시오.


-- 18. "해커스토익" 책이 대여된 횟수를 구하시오.


-- 19. 책을 대여한 회원 중에서 "010-"로 시작하는 전화번호를 가진 회원의 수를 구하시오.


-- 20. "나길동" 회원이 대여한 책들 중에서 아직 반납되지 않은 책의 수를 구하시오.


-- 21. "2023-06-01"부터 "2023-06-30" 사이에 대여된 책의 수를 날짜별로 구하시오.


-- 22. 연체 일수가 0일인 회원들의 이름과 이메일 주소를 조회하시오.


-- 23. "해커스토익" 책을 대여한 회원들과 "푸른사자 와니니" 책을 대여한 회원들의 합집합을 구하시오.


-- 23번 문제 join 으로 회원 이름,이메일 조회


-- 24. "코스모스" 책을 대여한 회원들의 이름과 대여일자를 조회하되, 최대 3명까지만 조회하시오.


-- 25. "푸른사자 와니니" 책을 대여한 회원들의 이메일 주소를 조회하시오.


-- 26. "2023-06-01"부터 "2023-06-30" 사이에 대여된 책의 수를 날짜별로 구하시오. 단, 날짜는 월(day)부분을 제외하고 출력하시오.


-- 27. "푸른사자 와니니" 책을 대여한 회원들 중에서 "해커스토익" 책을 대여한 회원들을 제외한 회원들의 이메일 주소를 조회하시오.


-- 28. "해커스토익" 책을 대여한 회원들 중에서 가장 늦게 반납한 회원의 이름과 대여일자, 반납일자를 조회하시오.


-- 29. "코스모스" 책을 대여한 회원들 중에서 연체 일수가 가장 많은 회원의 이름과 연체 일수를 조회하시오.


-- 30. "푸른사자 와니니" 책을 대여한 회원들 중에서 2023년 6월에 대여한 회원들의 이름과 대여일자를 조회하시오.


-- 31. 책을 대여한 회원들 중에서 반납한회원과 반납전인회원의 이름,이메일,전화번호,상태를 조회하시오.


-- 32. "해커스토익" 책을 대여한 회원들 중에서 연락처(tel) 정보를 가지고 있지 않은 회원들의 이름과 이메일 주소를 조회하시오.


-- 33. "코스모스" 책을 대여한 회원들 중에서 반납되지 않은 대여 건의 수를 구하시오.


-- 34. "해커스토익" 책을 대여한 회원들과 "코스모스" 책을 대여한 회원들의 합집합을 구하시오.


-- 35. 대여 일자(rent_date)가 가장 오래된 책의 정보를 조회하시오.


-- 35번문제 참고 : 출판 일자가 가장 오래된 책의 정보를 조회
SELECT *
FROM books
WHERE pdate = (
    SELECT MIN(pdate)
    FROM books
);

-- 36. 각 회원별로 대여한 책의 수를 조회하고, 대여한 책의 수가 가장 많은 회원을 찾으시오.


-- 37. 대여한 책 중에서 중복된 책을 제외한 유일한 책의 목록을 조회하시오.


-- 38. 대여된 모든 책의 목록과 대여하지 않은 모든 책의 목록을 합쳐서 조회하시오.


-- 39. 아직 반납되지 않은 책 중에서 반납일이 가장 이른 책의 정보를 조회하시오.


-- 40. 회원별로 대여한 책의 평균 대여 기간을 조회하시오.






